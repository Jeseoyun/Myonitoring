pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_REGISTRY = "kst1040"
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/myonitoring-backend"
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/myonitoring-frontend"
        GIT_COMMIT_SHORT = sh(
            script: "printf \$(git rev-parse --short HEAD)",
            returnStdout: true
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', 
                    credentialsId: 'gitlab-user-pwd', 
                    url: 'https://lab.ssafy.com/s12-webmobile3-sub1/S12P11B201.git'
            }
        }
        
        stage('Build & Push Backend') {
            when { 
                changeset "backend/**"
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        // 캐시를 활용한 백엔드 이미지 빌드
                        def backendImage = docker.build(
                            "${BACKEND_IMAGE}:${GIT_COMMIT_SHORT}",
                            "--cache-from ${BACKEND_IMAGE}:latest ./backend"
                        )
                        
                        // 커밋해시와 latest 태그로 푸시
                        backendImage.push()
                        backendImage.push('latest')
                    }
                }
            }
        }
        
        stage('Build & Push Frontend') {
            when { 
                changeset "frontend/**"
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        // 캐시를 활용한 프론트엔드 이미지 빌드
                        def frontendImage = docker.build(
                            "${FRONTEND_IMAGE}:${GIT_COMMIT_SHORT}",
                            "--cache-from ${FRONTEND_IMAGE}:latest ./frontend"
                        )
                        
                        // 커밋해시와 latest 태그로 푸시
                        frontendImage.push()
                        frontendImage.push('latest')
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'CI Pipeline succeeded! Images have been built and pushed to Docker Hub.'
        }
        failure {
            echo 'CI Pipeline failed! Check the logs for details.'
        }
        always {
            sh 'docker image prune -f'
            cleanWs()
        }
    }
}