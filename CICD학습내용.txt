Docker와 Jenkins를 활용한 CI/CD 파이프라인 구축

이 문서는 Docker와 Jenkins를 사용하여 CI/CD(지속적 통합 및 지속적 배포) 파이프라인을 구축하는 방법에 대해 설명합니다. Docker는 애플리케이션을 컨테이너화하여 개발, 테스트 및 배포 환경을 일관되게 만들 수 있도록 도와주며, Jenkins는 자동화된 빌드, 테스트 및 배포 프로세스를 지원하는 도구입니다.

목차

1. Docker란?
2. Jenkins란?
3. Docker와 Jenkins를 함께 사용하는 이유
4. Docker 및 Jenkins 설치
5. Jenkins에서 Docker를 사용하는 방법
6. CI/CD 파이프라인 구성
7. 결론
8. 참고 자료

1. Docker란?

Docker는 소프트웨어를 컨테이너라는 독립적인 실행 환경에 패키징하여 실행하는 기술입니다. 컨테이너는 애플리케이션과 그 실행에 필요한 라이브러리 및 의존성을 함께 패키징하여, 어느 환경에서나 일관된 동작을 보장합니다. 이를 통해 개발, 테스트, 배포 과정에서 발생할 수 있는 환경 차이를 해결할 수 있습니다.

2. Jenkins란?

Jenkins는 소프트웨어 개발의 자동화를 위한 오픈 소스 도구입니다. Jenkins는 빌드, 테스트, 배포를 자동화하고, CI/CD 파이프라인을 효율적으로 관리할 수 있게 도와줍니다. Jenkins는 다양한 플러그인을 지원하여, 프로젝트에 맞게 맞춤형 파이프라인을 쉽게 구축할 수 있습니다.

3. Docker와 Jenkins를 함께 사용하는 이유

- 일관된 환경 제공: Docker는 애플리케이션과 그 실행 환경을 컨테이너화하여, Jenkins의 빌드 및 배포 환경을 일관되게 유지할 수 있습니다. 이는 개발 환경과 배포 환경에서의 차이를 없애 주며, "내 컴퓨터에서는 잘 되는데"라는 문제를 해결합니다.
- 자동화된 빌드 및 배포: Jenkins는 Docker를 사용하여 애플리케이션을 빌드하고 배포할 수 있습니다. Jenkins와 Docker를 결합하면 자동화된 테스트 및 배포 파이프라인을 손쉽게 구축할 수 있습니다.
- 효율적인 리소스 관리: Docker 컨테이너는 가볍고 빠르게 실행되기 때문에 Jenkins의 빌드 에이전트를 효율적으로 관리할 수 있습니다.

4. Docker 및 Jenkins 설치

Docker 설치

Docker를 설치하려면 아래의 공식 문서를 참조하세요:
- Docker 설치 가이드: https://docs.docker.com/get-docker/

Jenkins 설치

Jenkins는 여러 방법으로 설치할 수 있으며, Docker 컨테이너에서 실행할 수도 있습니다. Jenkins를 Docker로 설치하는 방법은 다음과 같습니다:

1. Docker가 설치되어 있어야 합니다.
2. Jenkins 이미지를 다운로드합니다:

   docker pull jenkins/jenkins:lts

3. Jenkins를 Docker에서 실행합니다:

   docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts

   이후 웹 브라우저에서 http://localhost:8080 을 열어 Jenkins에 접근할 수 있습니다.

5. Jenkins에서 Docker를 사용하는 방법

Jenkins에서 Docker를 사용하려면 Docker 플러그인을 설치해야 합니다. 이를 통해 Jenkins 빌드 및 배포 과정에서 Docker를 활용할 수 있습니다.

Docker 플러그인 설치

1. Jenkins 대시보드에서 Manage Jenkins > Manage Plugins로 이동합니다.
2. Available 탭에서 Docker를 검색하고 설치합니다.
3. Jenkins를 재시작하여 플러그인이 적용되도록 합니다.

Jenkins에서 Docker를 사용한 빌드 구성

1. 새로운 Jenkins 파이프라인 프로젝트 생성:
   - Jenkins 대시보드에서 새로운 항목(New Item)을 클릭하고, 파이프라인(Pipeline)을 선택하여 새로운 파이프라인 프로젝트를 생성합니다.

2. Docker 이미지를 빌드하는 단계 추가:
   - 파이프라인의 Jenkinsfile에서 Docker를 사용하여 이미지를 빌드하는 단계를 추가할 수 있습니다. 예를 들어, Dockerfile이 있는 디렉토리에서 Docker 이미지를 빌드하는 코드를 작성합니다.

   pipeline {
       agent any
       stages {
           stage('Build Docker Image') {
               steps {
                   script {
                       docker.build("my-app-image")
                   }
               }
           }
           stage('Push Docker Image') {
               steps {
                   script {
                       docker.withRegistry('https://my-registry.com', 'docker-credentials-id') {
                           docker.image('my-app-image').push('latest')
                       }
                   }
               }
           }
       }
   }

3. Docker 컨테이너에서 테스트 실행:
   - Docker 컨테이너 내에서 애플리케이션을 실행하고 테스트를 수행하는 단계를 추가할 수 있습니다.

   stage('Test') {
       steps {
           script {
               docker.image('my-app-image').inside {
                   sh 'npm test'
               }
           }
       }
   }

6. CI/CD 파이프라인 구성

CI/CD 파이프라인을 Docker와 Jenkins를 사용하여 자동화할 수 있습니다. 다음은 기본적인 CI/CD 파이프라인 예시입니다:

1. 코드 푸시: 개발자가 GitHub에 코드를 푸시합니다.
2. Jenkins 빌드: Jenkins는 코드를 받아 Docker 이미지를 빌드하고, 테스트를 실행합니다.
3. Docker 이미지 배포: Docker 이미지는 Docker Hub나 다른 컨테이너 레지스트리에 푸시됩니다.
4. 프로덕션 배포: Docker 이미지를 프로덕션 환경에 배포하여 애플리케이션을 실행합니다.

7. 결론

Docker와 Jenkins를 결합하면 효율적이고 일관된 CI/CD 파이프라인을 구축할 수 있습니다. Docker는 애플리케이션의 실행 환경을 표준화하여 다양한 환경에서 발생할 수 있는 문제를 줄여주며, Jenkins는 자동화된 빌드, 테스트, 배포 프로세스를 제공합니다. 두 도구를 함께 사용하면 개발과 배포 속도를 크게 향상시킬 수 있습니다.

8. 참고 자료

- Docker 공식 문서: https://docs.docker.com/
- Jenkins 공식 웹사이트: https://www.jenkins.io/
- Jenkins Docker 플러그인: https://plugins.jenkins.io/docker/
- Jenkins Pipeline 문서: https://www.jenkins.io/doc/book/pipeline/
