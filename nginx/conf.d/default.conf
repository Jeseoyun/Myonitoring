server {
    listen 80;
    server_name ${SERVER_NAME};    
    return 301 https://$server_name$request_uri; 
}

# HTTPS server
server {
    listen 443 ssl;
    server_name ${SERVER_NAME};
 
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;

    # SSL 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # 백엔드 API로 포워딩
    location /api/ {
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 프론트엔드로 포워딩
    location / {
        # 요청을 frontend 서비스의 80포트로 전달
        proxy_pass http://frontend:80;

        # 프록시 헤더 설정
        proxy_set_header Host $host;                # 원본 호스트 헤더 전달
        proxy_set_header X-Real-IP $remote_addr;    # 클라이언트 실제 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 프록시된 IP 추적
        proxy_set_header X-Forwarded-Proto $scheme; # 원본 프로토콜(http/https) 전달

        # SPA 라우팅 지원
        proxy_intercept_errors on;  # Nginx가 백엔드의 에러 응답을 가로채도록 설정
        error_page 404 = @fallback; # 404 에러 발생 시 @fallback 위치로 이동
    }

    location @fallback {
        # 404 에러 발생 시 다시 frontend 서비스로 요청 전달
        proxy_pass http://frontend:80;
    }
}